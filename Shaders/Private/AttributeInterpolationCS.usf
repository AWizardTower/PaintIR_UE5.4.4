// 缺少Platform.ush将导致crash。
#include "/Engine/Public/Platform.ush"

// 原来可以用cbuffer
//cbuffer InterpolationSettings : register(b0)
//{
	int NumKeyPoints;
	float3 BoxExtent; // 用于反归一化相对坐标
//}

// float minVal;
// float maxVal; // 你的插值值的理论最大值范围
// uint VertexCount;  // 缓冲区的长度


//float3 BoxExtent;
// 包围盒最小值与最大值

//	float3 MinBound;
//	float3 MaxBound;+522

// 包围盒最小值与最大值

//	uint TextureWidth;  // 纹理的实际宽度
//	uint TextureHeight; // 纹理的实际高度

Texture2D<float4> InputTexture : register(t0); // 来自 RenderTarget 的内容
StructuredBuffer<float4> KeyPositions : register(t1); // xyz = 位置, w = 值
// StructuredBuffer<float3> VertexPositions : register(t0);
// StructuredBuffer<float2> VertexUVs : register(t1);
RWTexture2D<float4> OutputTexture : register(u0);

[numthreads(8, 8, 1)]
void MainCS(uint3 DTid : SV_DispatchThreadID)
{
	// 获取当前像素的坐标
	uint2 uv = DTid.xy;
	// 从输入纹理中读取归一化坐标，反归一化回世界坐标
	float4 encoded = InputTexture.Load(int3(uv, 0));
    float3 WorldPos = (encoded.rgb - 0.5) * BoxExtent;
	// 判断是否为纯黑背景（认为黑背景为无效像素）
    if (all(encoded.rgb == float3(0, 0, 0)))
    {
        OutputTexture[uv] = float4(0, 0, 0, 1); // 或者不写入（保持原值），看你需求
        return;
    }
	// 遍历判断是否为关键点（精确匹配），关键点返回原值
    for (int i = 0; i < NumKeyPoints; ++i)
    {
		// 1e-4
        if (all(abs(WorldPos - KeyPositions[i].xyz) < 1e-4))
        {
            OutputTexture[uv] = float4(KeyPositions[i].w.xxx, 1);
            return;
        }
    }
	// IDW 插值
    float totalWeight = 0.0;
    float valueSum = 0.0;
    float epsilon = 1e-3;
	float Sigma = 1; // 控制平滑程度，可以调试

    for (int i = 0; i < NumKeyPoints; ++i)
    {
        float dist = distance(WorldPos, KeyPositions[i].xyz);
    	//float weight = exp(- (dist * dist) / (2.0 * Sigma * Sigma)); // 高斯权重
    	float Power = 2.0;
    	float weight = 1.0 / pow(max(dist, epsilon), Power);

        valueSum += weight * KeyPositions[i].w;
        totalWeight += weight;
    }

    float interpolatedValue = totalWeight > 0 ? (valueSum / totalWeight) : 0.0;
	// 将插值结果写入输出纹理
	OutputTexture[uv] = float4(interpolatedValue.xxx, 1);
	//encoded.a = 1.0;
	//OutputTexture[uv] = float4(encoded);
	// uint index = DispatchThreadID.x + DispatchThreadID.y * TextureWidth; 
	//
	// if (index < VertexCount)
	// {
	// 	float3 position = VertexPositions[index];
	// 	float2 uv = VertexUVs[index];
	// 	// 映射坐标为 [0, 1] 区间
	// 	float3 normalizedPos = (position - MinBound) / (MaxBound - MinBound);
	// 	normalizedPos = saturate(normalizedPos); // 保守保险做一手截断
	// 	// 使用归一化的位置作为颜色
	// 	// float4 color = float4(normalizedPos, 1.0);
	// 	float4 color = float4(0.0, 0.0, 1.0, 1.0);
	//
	// 	// 将颜色写入纹理的对应UV位置
	// 	uint2 texelCoord = uint2(clamp(uv * float2(TextureWidth, TextureHeight), float2(0.0f, 0.0f), float2(TextureWidth - 1, TextureHeight - 1)));
	//
	// 	OutputTexture[texelCoord] = color;
	// }
}